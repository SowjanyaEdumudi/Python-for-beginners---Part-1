{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6e50e28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    }
   ],
   "source": [
    "print(\"hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7861d41f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     /|\n",
      "    / |\n",
      "   /  |\n",
      "  /   |\n",
      " /____|\n"
     ]
    }
   ],
   "source": [
    "print(\"     /|\")\n",
    "print(\"    / |\")\n",
    "print(\"   /  |\")\n",
    "print(\"  /   |\")\n",
    "print(\" /____|\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "512c9b82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " /____|\n",
      "     /|\n",
      "    / |\n",
      "   /  |\n",
      "  /   |\n"
     ]
    }
   ],
   "source": [
    "print(\" /____|\")\n",
    "print(\"     /|\")\n",
    "print(\"    / |\")\n",
    "print(\"   /  |\")\n",
    "print(\"  /   |\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "92e79424",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The man name is John and his age is 35\n"
     ]
    }
   ],
   "source": [
    "char_name = \"John\"\n",
    "char_age = \"35\"\n",
    "print (\"The man name is \" + char_name + \" and his age is \" + char_age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4f68abb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Basic Data types:\n",
    "#String, - \"\"needed\n",
    "#Numbers, decimals - \"\" not needed\n",
    "#boolean - True/False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a7900df4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "giraffe academy\n",
      "GIRAFFE ACADEMY\n",
      "False\n",
      "True\n",
      "15\n",
      "a\n",
      "8\n",
      "Elephant Academy\n"
     ]
    }
   ],
   "source": [
    "phrase = \"Giraffe Academy\"\n",
    "print(phrase.lower())\n",
    "print(phrase.upper())\n",
    "print(phrase.isupper())\n",
    "print(phrase.upper().isupper())\n",
    "print(len(phrase))\n",
    "print(phrase[3]) #index function\n",
    "print(phrase.index(\"Acad\")) #index function\n",
    "print(phrase.replace(\"Giraffe\",\"Elephant\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f111dae9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27\n",
      "1\n",
      "-5\n",
      "-5 my fav number\n",
      "5\n",
      "9\n",
      "6\n",
      "4\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#Working with numbers:\n",
    "print(3*(4+5))\n",
    "print (10%3) #modulus - gives remainder as output\n",
    "my_num = - 5\n",
    "print(my_num)\n",
    "print(str(my_num) + \" my fav number\")\n",
    "print(abs(my_num))\n",
    "print(pow(3,2)) #power function - needs 2 parameters - first number = the bottom number and the second number is the power number.\n",
    "print(max(4,6)) #max function\n",
    "print(min(4,6)) #min function\n",
    "print(round(3.4))#round function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "08371e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import * #allows us to do many more math functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2795fa9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "4\n",
      "6.0\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "num = -5\n",
    "print(floor(3.7)) #floor function - chops off the decimal point\n",
    "print(ceil(3.7)) #ceil function - rounds up to highest number of that decimal irrespective of wht is after the decimal\n",
    "print(sqrt(36))\n",
    "print(int(sqrt(36)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f2e8fb07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your name: Sanju\n",
      "Enter your age: 29\n",
      "Hi Sanju ! You are of 29\n"
     ]
    }
   ],
   "source": [
    "#Getting Input from User:\n",
    "name = input(\"Enter your name: \")\n",
    "age = input(\"Enter your age: \")\n",
    "print(\"Hi \" +name+ \" ! You are of \"+age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "47f757a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 1\n",
      "Enter a number: 2\n",
      "12\n",
      "Enter a number: 1\n",
      "Enter a number: 2\n",
      "3\n",
      "Enter a number: 4\n",
      "Enter a number: 5.5\n",
      "9.5\n"
     ]
    }
   ],
   "source": [
    "#Building a basic calculator:\n",
    "num1 = input(\"Enter a number: \")\n",
    "num2 = input(\"Enter a number: \")\n",
    "results = num1 +num2\n",
    "print(results)\n",
    "#Here the output is 12, because by default Input fucntion gives ut String value\n",
    "#Inorder for this to work correctly, we need to convert these num1 and num2 to integers\n",
    "#we have 2 ways\n",
    "#FIRST:\n",
    "num1 = input(\"Enter a number: \")\n",
    "num2 = input(\"Enter a number: \")\n",
    "results = int(num1) +int(num2)\n",
    "print(results)\n",
    "#This is a problem, if the input value is a decimal.\n",
    "#Second: - Lets user input any number they want\n",
    "num1 = input(\"Enter a number: \")\n",
    "num2 = input(\"Enter a number: \")\n",
    "results = float(num1) +float(num2)\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7ec1e5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mad Libs Game:\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
